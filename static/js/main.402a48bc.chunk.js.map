{"version":3,"sources":["Components/FeatureCompositePlot.js","Components/FastaComposite.js","Components/Plotter.js","App.js","reportWebVitals.js","index.js"],"names":["FeatureCompositePlot","classes","this","props","xWidth","yWidth","plotStyle","areaEnabled","areaOpacity","plotData","data","plotOptions","curve","enableArea","margin","top","right","bottom","left","xScale","type","stacked","min","parseInt","max","yScale","parseFloat","markers","axis","value","lineStyle","stroke","strokeWidth","strokeDasharray","legend","axisBottom","axisLeft","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","theme","fontSize","fontFamily","textColor","colors","datum","enablePoints","legends","svgString","className","card","Tooltip","title","IconButton","color","onClick","ReactDOMServer","renderToStaticMarkup","React","createElement","Line","animate","isInteractive","renderWrapper","width","height","element","document","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","exportButton","CardContent","chartContainer","axisTop","axisRight","enableSlices","Component","withStyles","minWidth","textfield","selectStyle","marginTop","FastaComposite","state","handleXWidth","event","winValue","target","setState","ValueLabelComponent","children","open","enterTouchDelay","placement","Plotter","plotted","plotColor","selectedRef","fastaData","enableFasta","enableScaling","handleYWidth","handlePlotStyle","handleArea","checked","handleScaling","handleFasta","handleSliderChange","handleSketchChange","hex","handleCheckboxClick","name","senseName","antiName","plotItem","jsonFile","filter","item","proteinName","push","map","line","plotValues","t","modifiedData","b","x","y","totalTagScaling","_id","id","filteredData","endsWith","console","log","handleRefChange","handleReset","Paper","container","CardActions","Grid","direction","spacing","TextField","label","variant","onChange","Select","labelId","MenuItem","FormHelperText","FormGroup","row","FormControlLabel","control","Checkbox","Typography","gutterBottom","Slider","aria-label","defaultValue","step","style","onChangeCommitted","length","Button","size","marginLeft","Divider","Object","keys","disableAlpha","textAlign","dat","includes","borderLeft","component","LinearProgress","padding","bars","border","theme1","createMuiTheme","typography","useNextVariants","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.402a48bc.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport ImportIcon from \"@material-ui/icons/GetApp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { ResponsiveLine, Line } from \"@nivo/line\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n// component styles\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  chartContainer: {\n    height: 500,\n  },\n  exportButton: {\n    // marginLeft: 10\n  },\n  textfield: {\n    width: 130,\n  },\n  selectStyle: {\n    marginTop: 8,\n  },\n};\n\nclass FeatureCompositePlot extends React.Component {\n  render() {\n    const { classes } = this.props;\n    const { xWidth, yWidth, plotStyle, areaEnabled, areaOpacity } = this.props;\n\n    const plotData = this.props.data;\n\n    const plotOptions = {\n      curve: plotStyle,\n      enableArea: areaEnabled,\n      margin: { top: 5, right: 50, bottom: 80, left: 60 },\n      xScale: {\n        type: \"linear\",\n        stacked: false,\n        min: -parseInt(xWidth),\n        max: parseInt(xWidth),\n      },\n      yScale: {\n        type: \"linear\",\n        stacked: false,\n        min: parseFloat(yWidth) > 1 ? -parseFloat(yWidth) : \"auto\",\n        max: parseFloat(yWidth) > 1 ? parseFloat(yWidth) : \"auto\",\n      },\n      markers: [\n        {\n          axis: \"x\",\n          value: 0,\n          lineStyle: {\n            stroke: \"#000\",\n            strokeWidth: 2,\n            strokeDasharray: (10, 8),\n          },\n          legend: \"\",\n        },\n        {\n          axis: \"y\",\n          value: 0,\n          lineStyle: {\n            stroke: \"#000\",\n            strokeWidth: 2,\n            strokeDasharray: (10, 8),\n          },\n        },\n      ],\n      axisBottom: {},\n      axisLeft: {\n        orient: \"left\",\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Tags\",\n        legendOffset: -50,\n        legendPosition: \"middle\",\n      },\n      theme: {\n        fontSize: 14,\n        fontFamily: \"Roboto Slab\",\n        markers: {\n          textColor: \"black\",\n          fontSize: 12,\n        },\n      },\n      colors: { datum: \"color\" },\n      areaOpacity: areaOpacity,\n      enablePoints: false,\n      legends: [],\n    };\n\n    // Function to export the plot as svg\n    let svgString = \"\";\n    const handleExport = () => {\n      svgString = ReactDOMServer.renderToStaticMarkup(\n        React.createElement(Line, {\n          animate: false,\n          isInteractive: false,\n          renderWrapper: false,\n\n          data: plotData,\n\n          width: 1200,\n          height: 500,\n\n          ...plotOptions,\n        })\n      );\n\n      // creating an svg file and triggering download\n      const element = document.createElement(\"a\");\n      const file = new Blob([svgString]);\n      element.href = URL.createObjectURL(file);\n      element.download = \"compositePlot.svg\";\n      // Required for this to work in FireFox\n      document.body.appendChild(element);\n      element.click();\n    };\n\n    return (\n      <div className={classes.card}>\n        <Tooltip title=\"Composite SVG\">\n          <IconButton color=\"primary\" onClick={handleExport}>\n            <ImportIcon className={classes.exportButton} />\n          </IconButton>\n        </Tooltip>\n\n        <CardContent className={classes.chartContainer}>\n          <ResponsiveLine\n            data={plotData}\n            axisTop={null}\n            axisRight={null}\n            {...plotOptions}\n            enablePoints={false}\n            enableSlices={\"x\"}\n          />\n        </CardContent>\n      </div>\n    );\n  }\n}\n\nFeatureCompositePlot.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(FeatureCompositePlot);\n","import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport ImportIcon from \"@material-ui/icons/GetApp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { ResponsiveLine, Line } from \"@nivo/line\";\n\n// component styles\nconst styles = {\n  card: {\n    minWidth: 275,\n    marginTop: -130,\n  },\n  chartContainer: {\n    height: 250,\n  },\n  exportButton: {\n    // marginLeft: 10\n  },\n  textfield: {\n    width: 130,\n  },\n  selectStyle: {\n    marginTop: 8,\n  },\n};\n\nclass FastaComposite extends React.Component {\n  state = {\n    xWidth: 250,\n  };\n\n  handleXWidth = (event) => {\n    let winValue = event.target.value > 0 ? event.target.value : 250;\n    this.setState({ xWidth: winValue });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    const plotData = this.props.data;\n\n    const plotOptions = {\n      curve: \"step\",\n      enableArea: true,\n      margin: { top: 5, right: 50, bottom: 80, left: 60 },\n      xScale: {\n        type: \"linear\",\n        stacked: false,\n        min: -parseInt(this.props.xWidth),\n        max: parseInt(this.props.xWidth),\n      },\n      yScale: {\n        type: \"linear\",\n        stacked: false,\n        max: 1.5,\n      },\n      markers: [\n        {\n          axis: \"x\",\n          value: 0,\n          lineStyle: {\n            stroke: \"#000\",\n            strokeWidth: 2,\n            strokeDasharray: (10, 8),\n          },\n          legend: \"\",\n        },\n        {\n          axis: \"y\",\n          value: 0,\n          lineStyle: {\n            stroke: \"#000\",\n            strokeWidth: 2,\n            strokeDasharray: (10, 8),\n          },\n        },\n      ],\n      axisBottom: {\n        orient: \"bottom\",\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Distance from Center (bp)\",\n        legendOffset: 46,\n        legendPosition: \"middle\",\n      },\n      axisLeft: {},\n      theme: {\n        fontSize: 14,\n        fontFamily: \"Roboto Slab\",\n        markers: {\n          textColor: \"black\",\n          fontSize: 12,\n        },\n      },\n      colors: { datum: \"color\" },\n      enablePoints: false,\n      legends: [],\n    };\n\n    // Function to export the plot as svg\n    let svgString = \"\";\n    const handleExport = () => {\n      svgString = ReactDOMServer.renderToStaticMarkup(\n        React.createElement(Line, {\n          animate: false,\n          isInteractive: false,\n          renderWrapper: false,\n          areaOpacity: 1,\n          data: plotData,\n\n          width: 1200,\n          height: 500,\n\n          ...plotOptions,\n        })\n      );\n\n      // creating an svg file and triggering download\n      const element = document.createElement(\"a\");\n      const file = new Blob([svgString]);\n      element.href = URL.createObjectURL(file);\n      element.download = \"fastaSVG.svg\";\n      // Required for this to work in FireFox\n      document.body.appendChild(element);\n      element.click();\n    };\n\n    return (\n      <div className={classes.card}>\n        <Tooltip title=\"Fasta SVG\">\n          <IconButton color=\"primary\" onClick={handleExport}>\n            <ImportIcon className={classes.exportButton} />\n          </IconButton>\n        </Tooltip>\n\n        <CardContent className={classes.chartContainer}>\n          <ResponsiveLine\n            data={plotData}\n            axisTop={null}\n            axisRight={null}\n            {...plotOptions}\n            enablePoints={false}\n            enableSlices={\"x\"}\n            areaOpacity={1}\n          />\n        </CardContent>\n      </div>\n    );\n  }\n}\n\nFastaComposite.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(FastaComposite);\n","import React, { Component } from \"react\";\n\n// material-ui imports\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Slider from \"@material-ui/core/Slider\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nimport {\n  TextField,\n  CardActions,\n  Select,\n  MenuItem,\n  FormHelperText,\n  CardContent,\n  Tooltip,\n} from \"@material-ui/core\";\n\nimport CompositePlot from \"./FeatureCompositePlot\";\nimport FastaComposite from \"./FastaComposite\";\nimport { SketchPicker } from \"react-color\";\n\nimport jsonFile from \"../Data/example.json\";\n\n// For the slider component\nfunction ValueLabelComponent(props) {\n  const { children, open, value } = props;\n\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n      {children}\n    </Tooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\n// component styles.\nconst styles = (theme) => ({\n  container: {\n    padding: 20,\n  },\n  selectStyle: {\n    width: 120,\n  },\n  bars: {\n    // marginTop: -300,\n    border: \"2px solid green\",\n  },\n  exportButton: {\n    // marginLeft: 10\n  },\n  textfield: {\n    width: 130,\n  },\n});\n\nclass Plotter extends Component {\n  state = {\n    data: [],\n    plotted: [],\n    plotColor: \"\",\n    selectedRef: \"\",\n    fastaData: [],\n    xWidth: 250,\n    yWidth: 1,\n    plotStyle: \"monotoneX\",\n    areaEnabled: true,\n    areaOpacity: 0.2,\n    enableFasta: false,\n    enableScaling: true,\n  };\n\n  componentDidMount() {\n    console.log(\"JSON file is loaded \");\n    console.log(jsonFile);\n  }\n\n  // #########################################################################################################\n  // Plot settings\n  // #########################################################################################################\n\n  handleXWidth = (event) => {\n    let winValue = event.target.value > 0 ? event.target.value : 250;\n    this.setState({ xWidth: winValue });\n  };\n\n  handleYWidth = (event) => {\n    let winValue = event.target.value > 0 ? event.target.value : 1;\n    this.setState({ yWidth: winValue });\n  };\n\n  handlePlotStyle = (event) => {\n    this.setState({ plotStyle: event.target.value });\n  };\n\n  handleArea = (event) => {\n    // let value = event.target.checked ? true : false;\n    this.setState({ areaEnabled: event.target.checked });\n  };\n\n  handleScaling = (event) => {\n    // let value = event.target.checked ? true : false;\n    this.setState({\n      enableScaling: event.target.checked,\n      data: [],\n      plotted: [],\n    });\n  };\n\n  handleFasta = (event) => {\n    this.setState({ enableFasta: event.target.checked });\n  };\n\n  handleSliderChange = (event, value) => {\n    this.setState({ areaOpacity: value });\n  };\n\n  // Color picker for the plot\n  handleSketchChange = (color) => {\n    this.setState({ plotColor: color.hex });\n  };\n\n  // #########################################################################################################\n\n  // Plot the selected dataset at the selectedRef\n  handleCheckboxClick = (event) => {\n    // get the selectedRef and target\n    let { selectedRef } = this.state;\n    let target = event.target.name;\n\n    // set senseName and antiName to remove datasets when unchecked.\n    let senseName = selectedRef + \"-\" + target + \"-Sense\";\n    let antiName = selectedRef + \"-\" + target + \"-Anti\";\n\n    // console.log(target, selectedRef);\n\n    // check if the target is to be plotted\n    if (event.target.checked) {\n      // Retrieve the plotItem\n      let plotItem = jsonFile[selectedRef].filter((item) => {\n        return item.proteinName === target;\n      });\n\n      // setting the value to the object, instead of an array\n      plotItem = plotItem[0];\n\n      // Add it to the list of plotted.\n      let plotted = this.state.plotted;\n      plotted.push(event.target.name);\n\n      // Check if custom color is needed and set it based on the selected value\n      plotItem.plotData = plotItem.plotData.map((line) => {\n        // console.log(line.color);\n        line.color = this.state.plotColor;\n        return line;\n      });\n\n      // check if scaling is required and modify the plotData\n      if (this.state.enableScaling) {\n        // To generate the data after multplying with a scaling factor. Using a different global variable to avoid mutation of data.\n        var plotValues = plotItem.plotData.map((t) => {\n          let modifiedData = t.data.map((b) => {\n            // console.log(b.y, parseFloat(b.y) * plotItem.totalTagScaling);\n            return { x: b.x, y: parseFloat(b.y) * plotItem.totalTagScaling };\n          });\n          return { _id: t._id, color: t.color, data: modifiedData, id: t.id };\n        });\n\n        // set the state to reflect the data - WITH scaling applied\n        this.setState({\n          data: [...this.state.data, ...plotValues],\n          plotted: plotted,\n        });\n      } else {\n        // set the state to reflect the data - WITHOUT scaling applied\n        this.setState({\n          data: [...this.state.data, ...plotItem.plotData],\n          plotted: plotted,\n        });\n      }\n    } else {\n      // remove the checked item\n      let plotted = this.state.plotted.filter((item) => {\n        return item !== event.target.name;\n      });\n\n      let filteredData = this.state.data.filter((item) => {\n        // return only those items that are not unchecked\n        if (!item.id.endsWith(senseName) && !item.id.endsWith(antiName)) {\n          return item;\n        }\n      });\n\n      // set the state to reflect the data\n      this.setState({\n        data: filteredData,\n        plotted: plotted,\n      });\n\n      // log the information\n      console.log(\n        event.target.name +\n          \" is already plotted, Removing it from the data list\"\n      );\n    }\n  };\n\n  // To select gene categories\n  // handleCategory = async (event) => {\n  //   // When category changes, fetch references -> datasets -> fasta\n  //   await this.setState({\n  //     selectedCategory: event.target.value,\n  //     referencePoints: [],\n  //     selectedRef: \"\",\n  //     datasets: [],\n  //     fastaData: [],\n  //     data: [],\n  //     plotted: [],\n  //   });\n\n  //   // add references\n  //   this.fetchRefs();\n  // };\n\n  handleRefChange = (event) => {\n    // https://github.com/facebook/react/issues/6179\n    this.setState({\n      selectedRef: event.target.value,\n      data: [],\n      plotted: [],\n      fastaData: [],\n    });\n  };\n\n  handleReset = () => {\n    this.setState({\n      selectedRef: \"\",\n      data: [],\n      plotted: [],\n      plotColor: \"\",\n      fastaData: [],\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const {\n      selectedRef,\n      plotted,\n      plotColor,\n      xWidth,\n      yWidth,\n      plotStyle,\n      areaEnabled,\n      fastaData,\n      areaOpacity,\n      enableFasta,\n      enableScaling,\n    } = this.state;\n\n    return (\n      <Paper className={classes.container}>\n        <h1>\n          Plot Composites at genomic loci, motif reference points and regions of\n          interest.\n        </h1>\n\n        {/* Plot controls */}\n        <CardActions>\n          <Grid container direction=\"row\" spacing={2}>\n            <Grid item>\n              <TextField\n                id=\"xWidth-textfield\"\n                label=\"X-axis (Max)\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                className={classes.textfield}\n                onChange={this.handleXWidth}\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                id=\"yWidth-textfield\"\n                label=\"Y-axis (Max)\"\n                variant=\"outlined\"\n                margin=\"dense\"\n                className={classes.textfield}\n                onChange={this.handleYWidth}\n              />\n            </Grid>\n            <Grid item>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={plotStyle}\n                margin=\"dense\"\n                className={classes.selectStyle}\n                onChange={this.handlePlotStyle}\n              >\n                <MenuItem value={\"linear\"}>Linear</MenuItem>\n                <MenuItem value={\"monotoneX\"}>MonotoneX</MenuItem>\n              </Select>\n              <FormHelperText>Choose plot style</FormHelperText>\n            </Grid>\n            <Grid item>\n              <FormGroup row>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      color=\"primary\"\n                      name=\"enableArea\"\n                      checked={areaEnabled}\n                      onClick={this.handleArea}\n                    />\n                  }\n                  label=\"Enable Area\"\n                />\n              </FormGroup>\n            </Grid>\n            <Grid item>\n              <Typography gutterBottom>Area Opacity</Typography>\n              <Slider\n                ValueLabelComponent={ValueLabelComponent}\n                aria-label=\"custom thumb label\"\n                defaultValue={areaOpacity}\n                max={1}\n                step={0.1}\n                style={{ width: 100 }}\n                onChangeCommitted={this.handleSliderChange}\n              />\n            </Grid>\n            <Grid item>\n              <FormGroup row>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      color=\"primary\"\n                      name=\"enableFasta\"\n                      checked={enableFasta}\n                      onClick={this.handleFasta}\n                    />\n                  }\n                  label=\"Show Fasta Sequence\"\n                />\n              </FormGroup>\n            </Grid>\n            <Grid item>\n              <FormGroup row>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      color=\"primary\"\n                      name=\"enableScaling\"\n                      checked={enableScaling}\n                      onClick={this.handleScaling}\n                    />\n                  }\n                  label=\"Enable Scaling (Total Tag)\"\n                />\n              </FormGroup>\n            </Grid>\n          </Grid>\n        </CardActions>\n\n        {/* Plots */}\n        <CompositePlot\n          data={this.state.data}\n          xWidth={xWidth}\n          yWidth={yWidth}\n          plotStyle={plotStyle}\n          areaEnabled={areaEnabled}\n          areaOpacity={areaOpacity}\n        />\n\n        {enableFasta ? <FastaComposite data={fastaData} xWidth={xWidth} /> : \"\"}\n        <br />\n\n        <Typography gutterBottom>\n          No.of Datasets plotted : {plotted.length}\n          <Button\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={this.handleReset}\n            size=\"small\"\n            style={{ marginLeft: 20 }}\n          >\n            Reset plot\n          </Button>\n        </Typography>\n\n        <Divider />\n        <br />\n\n        <Grid container spacing={4}>\n          {/* <Grid item>\n            <Select\n              labelId=\"category-select\"\n              id=\"category-select\"\n              value={\"STM\"}\n              margin=\"dense\"\n              className={classes.selectStyle}\n              onChange={this.handleCategory}\n            >\n              {categories.map(item => {\n                return (\n                  <MenuItem value={item} key={item}>\n                    {item}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n            <FormHelperText>Select Gene Category</FormHelperText>\n          </Grid> */}\n          <Grid item>\n            <Select\n              labelId=\"referencePoint-select\"\n              id=\"referencePoint-select\"\n              value={selectedRef}\n              margin=\"dense\"\n              className={classes.selectStyle}\n              onChange={this.handleRefChange}\n            >\n              {Object.keys(jsonFile).map((item) => {\n                return (\n                  <MenuItem value={item} key={item + \"-ref\"}>\n                    {item}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n            <FormHelperText>Select Reference Point</FormHelperText>\n          </Grid>\n          <Grid item>\n            <SketchPicker\n              color={plotColor}\n              onChange={this.handleSketchChange}\n              disableAlpha={false}\n            />\n            <h4 style={{ textAlign: \"center\" }}>Pick Plot Color</h4>\n          </Grid>\n          <Grid item style={{ width: 900 }}>\n            <CardContent>\n              {/* If a reference point is selected then show the available datasets. default is emptyString.\n              The checked property is set to true if the proteinName is present in the list of plotted. */}\n              {jsonFile[selectedRef] ? (\n                jsonFile[selectedRef].length > 0 ? (\n                  <FormGroup row>\n                    {jsonFile[selectedRef].map((dat) => {\n                      return (\n                        <FormControlLabel\n                          key={dat.proteinName}\n                          control={\n                            <Checkbox\n                              color=\"primary\"\n                              name={dat.proteinName}\n                              onClick={this.handleCheckboxClick}\n                              checked={plotted.includes(dat.proteinName)}\n                            />\n                          }\n                          style={{ borderLeft: \"1px solid gray\", width: 130 }}\n                          label={dat.proteinName}\n                        />\n                      );\n                    })}\n                  </FormGroup>\n                ) : (\n                  <Typography component=\"div\" gutterBottom>\n                    Loading datasets\n                    <LinearProgress />\n                  </Typography>\n                )\n              ) : (\n                \" \"\n              )}\n            </CardContent>\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  }\n}\n\nPlotter.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Plotter);\n","import React, { Component } from \"react\";\n\n// Material ui styling\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n// SubComponents\nimport Plotter from \"./Components/Plotter\";\n\n// creating a themes with default fontfamily\nconst theme1 = createMuiTheme({\n  typography: {\n    fontFamily: [\n      '\"Roboto Slab\"',\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ],\n    useNextVariants: true,\n  },\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme1}>\n        <CssBaseline />\n        <Plotter />\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}